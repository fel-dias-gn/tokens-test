'use strict';

const _ = require('lodash');

class Message extends Function {

  static setData (name, val) {
    if (arguments.length === 1 && name && typeof name === 'object') {
      return _.each(name, (val, name) => {
        Message.setData(name, val);
      });
    }
    Message.data = Message.data || {};
    _.set(Message.data, name, val);
    return val;
  }

  static create (content, data) {
    var Class = this,
      fn = message;
    Object.setPrototypeOf(fn, Message.prototype);
    fn.init(content, data);
    return fn;

    function message(data) {
      return message.render(data);
    }
  }

  static replace (content, data) {
    return content.replace(/\{\{(.+?)\}\}/mgi, (txt, name) => {
      var val = _.get(data, name);
      if (val === undefined) {
        return txt;
      }
      return val;
    });
  }

  static parseMessages (source) {
    var messages = {};
    source.replace(/\#\#(.+)[\s\S]*?\`\`\`([\s\S]*?)\`\`\`/mgi, (txt, n, content) => {
      var text = content.trim(),
        name = n.trim(),
        baseName = name.split('.').pop(),
        parentName = name.slice(0, name.lastIndexOf('.')),
        parent = _.get(messages, parentName) || {},
        message = Message.create(text);

      _.set(messages, parentName, parent);
      parent[baseName] = message;
    });
    return messages;
  }

  init (content, data) {
    var self = this;
    self.content = content;
    self.data = data || {};
  }

  render (d) {
    var self = this,
      selfData = typeof self.data === 'function' ? self.data() : self.data,
      data = _.extend({}, Message.data, selfData || {}, d || {}),
      content = self.content || '';
    return Message.replace(content, data);
  }

  toString () {
    var self = this;
    return self.render();
  }

  valueOf () {
    var self = this;
    return self.toString();
  }

  toJSON () {
    var self = this;
    return self.toString();
  }

  log (data) {
    var self = this;
    console.log('\n', self.render(data), '\n');
  }

  error (data) {
    var self = this;
    console.error('\n', self.render(data), '\n');
    process.exit(0);
  }

  err (...args) { return self.error(...args); }

}

module.exports = Message;
