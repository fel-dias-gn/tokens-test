#!/usr/bin/env node

'use strict';

const _ = require('lodash');
const tinyclap = require('tinyclap');
const path = require('path');
const qpackage = require('./index');
const fs = require('fs');

const Message = require('./message');

const clap = require('tinyclap')();
const logs = parseMessages();
const ar = clap.argv;
const name = clap.cmd;
const outputDir = getOutputDir(process.cwd(), name);

Message.setData({
  clap, ar, name, outputDir
});

var desc = ar.description || ar.desc || ar.d,
  authorName = ar['author.name'] || ar.authorName || ar.name || ar.n || ar.a,
  authorEmail = ar['author.email'] || ar.authorEmail || ar.email || ar.e,
  authorGithub = ar['author.github'] || ar.authorGithub || ar.github || ar.g,
  cp = ar['copyright'] || ar.cp || ar.c,
  options = {
    name: name,
    desc: desc,
    authorName: authorName,
    authorEmail: authorEmail,
    authorGithub: authorGithub,
    cp: cp
  };

var p = new qpackage.Package(options);

p.create(outputDir);

logs.success.created.log();

function getOutputDir(basedir, name) {
  if (!basedir || !name) {
    logs.name.required.error();
  }
  var outputDir = path.join(process.cwd(), name);
  if (fs.existsSync(outputDir)) {
    logs.output.exists.error({
      outputDir
    });
  }
  return outputDir;
}

function parseMessages() {
  var filename = path.join(__dirname, 'messages.md');
  return Message.parseMessages(
    fs.readFileSync(filename, 'utf-8')
  );
}
